// Code generated by MockGen. DO NOT EDIT.
// Source: internal/users/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dtos "github.com/martinyonatann/go-unit-test/internal/users/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUseCases) CreateUser(ctx context.Context, request dtos.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCasesMockRecorder) CreateUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCases)(nil).CreateUser), ctx, request)
}

// GetUserDetail mocks base method.
func (m *MockUseCases) GetUserDetail(ctx context.Context, userUUID string) (dtos.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetail", ctx, userUUID)
	ret0, _ := ret[0].(dtos.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetail indicates an expected call of GetUserDetail.
func (mr *MockUseCasesMockRecorder) GetUserDetail(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetail", reflect.TypeOf((*MockUseCases)(nil).GetUserDetail), ctx, userUUID)
}
